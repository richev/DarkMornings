@model Richev.DarkMornings.Web.Models.CommuteInfoModel

<div id="fb-root"></div>
<script>
(function (d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1&appId=684464021575093";
    fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

@if (Model.tw.Daylights == null || Model.fw.Daylights == null)
{
    <p class="question">Ever wonder how much longer you'll be commuting in the dark?</p>

    <div id="warning" class="alert alert-warning" style="display: none;">
    </div>

    @Html.ValidationSummary(string.Empty, new { @class = "alert alert-danger" })

    using (Html.BeginForm("Index", "Home", FormMethod.Get))
    {
        @Html.HiddenFor(model => model.la)
        @Html.HiddenFor(model => model.lo)
        @Html.HiddenFor(model => model.wd)
        @Html.HiddenFor(model => model.tz)
        <h3>Journey timings</h3>
        <div class="with-icon">
            <i class="fa fa-arrow-circle-o-right"></i><span>I leave home at</span>
            <span class="time-selector">
                @Html.DropDownListFor(model => model.tw.h, UIHelpers.GetHours(Model.tw.h))<span class="time-separator">:</span>@Html.DropDownListFor(model => model.tw.m, UIHelpers.GetMinutes(Model.tw.m))
            </span>
        </div>
        <div class="with-icon">
            <i class="fa fa-arrow-circle-o-left"></i><span>I leave work at</span>
            <span class="time-selector">
                @Html.DropDownListFor(model => model.fw.h, UIHelpers.GetHours(Model.fw.h))<span class="time-separator">:</span>@Html.DropDownListFor(model => model.fw.m, UIHelpers.GetMinutes(Model.fw.m))
            </span>
        </div>
        <div class="with-icon">
            <i class="fa fa-clock-o"></i><span>My journey takes</span>
            <span class="duration-selector">
                @Html.DropDownListFor(model => model.d, UIHelpers.GetJourneyDurations(Model.d))
            </span>
        </div>
        <div class="accordion">
            <h3><span class="header-text">Workdays</span> <span class="text-info">Which days do you go to work? Defaults to Mon-Fri, click to change.</span></h3>
            <div class="working-days with-icon">
                <i class="fa fa-exchange"></i><span>I go to work on</span>
                <div class="btn-group">
                    <button class="btn">Sun</button>
                    <button class="btn">Mon</button>
                    <button class="btn">Tue</button>
                    <button class="btn">Wed</button>
                    <button class="btn">Thu</button>
                    <button class="btn">Fri</button>
                    <button class="btn">Sat</button>
                </div>
            </div>
        </div>
        <div style="clear: both;">
            <button class="btn btn-lg btn-success" type="submit">Count your journeys &raquo;</button>
        </div>
    }
}
else
{
    <p class="question">Your journey to work is from @UIHelpers.FormatCommuteTime(Model.tw)&nbsp;to&nbsp;@UIHelpers.FormatCommuteTime(Builders.BuildEndCommuteTimeModel(Model.tw, Model.d)) and your journey back home is from @UIHelpers.FormatCommuteTime(Model.fw)&nbsp;to&nbsp;@UIHelpers.FormatCommuteTime(Builders.BuildEndCommuteTimeModel(Model.fw, Model.d)).</p>
    <p>You do this @UIHelpers.FormatDaysCount(@Model.wd) a week; every @UIHelpers.FormatWorkingDays(Model.wd.Select(d => d == UIHelpers.WorkingDayTrue).ToArray()).</p>
    <h3>This means&hellip;</h3>
    <div class="results journey with-icon">
        @Html.Partial("_DaylightInfo", Model.tw.Daylights)
    </div>
    <hr class="and" />
    <div class="results journey with-icon">
        @Html.Partial("_DaylightInfo", Model.fw.Daylights)
    </div>
    <p class="text-info excluding">(excluding Bank and national holidays)</p>
    <hr class="and" />
    <div class="accordion">
        <h3><span class="header-text">Your location</span> <span class="text-info">This is where we think you are.</span></h3>
        <div class="location-map">
            <p class="text-info"><strong>X</strong> marks the spot.</p>
            <img src="@UIHelpers.GetMapImageUrl(Model.la.Value, Model.lo.Value)" alt="This is where we think you are." title="This is where we think you are." width="640" height="320" />
            <p class="text-info">This is the location we used when calculating sunrise and sunset times, as well as your time zone (important for daylight savings things!).</p>
        </div>
    </div>
    <hr class="and" />
    <div>
        Share this...
        <a href="https://twitter.com/share" class="twitter-share-button" data-lang="en" data-size="large" data-url="@Request.Url.Scheme://@Request.Url.Host" data-text="@UIHelpers.GetTweetText(Model)">Tweet this on Twitter</a>
        <div class="fb-share-button" data-href="@Request.Url.Scheme://@Request.Url.Host" data-type="button_count"></div>
        or 
        <a href="@Url.Action("Index", "Home")"><i class="fa fa-sun-o"></i>have another go...</a>
    </div>
}

@section scripts {

    <script>
        !function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (!d.getElementById(id)) {
                js = d.createElement(s);
                js.id = id;
                js.src = "https://platform.twitter.com/widgets.js";
                fjs.parentNode.insertBefore(js, fjs);
            }
        }(document, "script", "twitter-wjs");
    </script>
    
    <script type="text/javascript">
        function storePosition(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;

            $("#la").val(latitude.toFixed(2));
            $("#lo").val(longitude.toFixed(2));
        }

        function failPosition(e) {
            if (e.code == 1) {
                showWarning("<p>Your browser is set to not tell us your location.</p><p>Instead, we'll try to figure this out using your IP address (less accurate, might not work).</p>");
            } else {
                showWarning("<p>Your location could not be figured out (" + e.message + ").</p><p>Instead, we'll try to find this out using your IP address (less accurate, might not work).</p>");
            }
        }

        var setWorkingDaysString = function() {
            var buttons = $(".working-days .btn-group button");

            var wd = "";

            buttons.each(function(i, elem) {
                wd += $(elem).hasClass("checked") ? "@UIHelpers.WorkingDayTrue" : "@UIHelpers.WorkingDayFalse";
            });

            $("#wd").val(wd);
        };

        var setWorkingDaysButtons = function() {
            var buttons = $(".working-days .btn-group button");
            var workingDays = $("#wd").val();

            buttons.each(function(i, elem) {
                $(elem).removeClass("checked");
                if (workingDays[i] == "@UIHelpers.WorkingDayTrue") {
                    $(buttons[i]).addClass("checked");
                }
            });
        };

        // From http://michaelapproved.com/articles/timezone-detect-and-ignore-daylight-saving-time-dst
        var timezoneDetect = function() {
            var dtDate = new Date('1/1/' + (new Date()).getUTCFullYear());
            var intOffset = 10000; //set initial offset high so it is adjusted on the first attempt
            var intMonth;

            //go through each month to find the lowest offset to account for DST
            for (intMonth = 0; intMonth < 12; intMonth++) {
                //go to the next month
                dtDate.setUTCMonth(dtDate.getUTCMonth() + 1);

                //To ignore daylight saving time look for the lowest offset.
                //Since, during DST, the clock moves forward, it'll be a bigger number.
                if (intOffset > (dtDate.getTimezoneOffset() * (-1))) {
                    intOffset = (dtDate.getTimezoneOffset() * (-1));
                }
            }

            return intOffset / 60; // to adjust minutes to hours
        };

        var showWarning = function(msgHtml) {
            $("#warning").append(msgHtml);
            $("#warning").show();
            resizeOverlay();
        };

        $(document).ready(function() {
            if ($("#la").val() == "" || $("#lo").val() == "") {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(storePosition, failPosition);
                } else {
                    showWarning("<p>You're using a browser that won't tell us your location (or it may just be set this way).</p>Instead, we'll try to find this out using your IP address (less accurate, might not work).</p>");
                }
            }

            if ($("#tz").val() == "") {
                $("#tz").val(timezoneDetect());
            }

            $(".working-days button").click(function() {
                $(this).toggleClass("checked");

                setWorkingDaysString();

                return false;
            });

            $(".accordion").accordion({
                header: "h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                activate: resizeOverlay
            });;

            setWorkingDaysButtons();
        });
    </script>
}